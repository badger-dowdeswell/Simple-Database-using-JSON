//
// MAINTAIN CUSTOMER INFORMATION
// =============================
// This form is used to manage the creation
// of new customers in the Customer database
// table. It also allows the information for
// each customer to be changed and updated
// later.
//
// Revision History
// ================
// 02.11.2024 BRD Original version.
//
using System.IO;
using System.Text.Json;
using System;
using System.Runtime.Remoting.Messaging;

namespace Simple_Database {
    internal class dbCustomer {

        private string lastError = "";
        public Data data = new Data();
        private string tableName = "";
        private string directoryName = "";                      

        //
        // Constructor
        // ===========
        public dbCustomer() {  
            // Automatically set a string to hold the path to the Database folder in the
            // correct bin/Debug folder for this project.
            directoryName = Directory.GetCurrentDirectory();
                        
            // Set the name of the database table in the Database folder. It will
            // be a subdirectory of the Database folder located below the bin/Debug
            // folder for this project.
            //
            tableName = "customer"; 
        }

        //
        // LastError 
        // =========
        // Returns the last error message generated by this class.
        //
        public string LastError {
            get { return lastError; }                
        }

        //
        // Read
        // ====
        // Reads the specified record from the database table and unpacks the data in the
        // record if it is found. If the record is not found, all the database entries are
        // automaticall set blank so a new record can be created by the program if necessary.
        // 
        public Boolean Read(string ID) {
            lastError = "";
            Boolean found = false;
            Data newData = new Data();
            string json;

            if (directoryName.Trim() == "") {
                lastError = "Database directory name is blank.";
            } else if (tableName.Trim() == "") {
                lastError = "Table name is blank.";
            } else if (ID.Trim() == "") {
                lastError = "The record ID is blank"; 
            } else {
                // Open the JSON file, read to the end, and convert the JSON data to a single object
                // with named fields. This is called deserialising.
                try {
                    StreamReader reader = new StreamReader(directoryName + "\\Database\\" + tableName + "\\" + ID + ".txt") {

                    };
                    json = reader.ReadToEnd();
                    reader.Close();

                    // The options variable sets up the parameters to make the DeSerialiszer 
                    // case insensitive.
                    var JsonOptions = new JsonSerializerOptions();
                    JsonOptions.PropertyNameCaseInsensitive = true;
                    
                    data = JsonSerializer.Deserialize<Data>(json, JsonOptions);
                    found = true;

                } catch (Exception e) {
                    // the record was not found.
                    lastError = e.Message;
                    found = false;
                } 
            }
            return found;
        }
    }

    //
    // Data
    // ====
    // This is the internal class that provides access to each named field
    // stored in the JSON file. Other forms can access these fields by using
    // the method this class provides like this:
    //
    //     textBoxAddress.Text = customer.data.CustomerAddress; 
    // 
    // To add a new field to the table, create a new attribute with the correct
    // get and set methods to manage the new field. Declare the field at the
    // top of this class. The Read() and Update() methods will then automatically
    // process this new field. No changes should be required to the Read() or
    // Update() methods.
    //
    internal class Data {
        private string customerID;
        private string customerName;
        private string customerAddress;

        public string CustomerID {
            get {return customerID; }
            set {customerID = value; }
        }

        public string CustomerName {
            get {return customerName; }
            set {customerName = value; }
        }

        public string CustomerAddress {
            get {return customerAddress; }
            set {customerAddress = value; }
        }
    }
}