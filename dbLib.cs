//
// dbLib
// =====
// Library of common database functions shared by all 
// of the separate database table classes.
//
// Revision History
// ================
// 27.11.2024 BRD Original version
//
using System;
using System.IO;
using System.Text.Json;

namespace db {
    internal class dbLib {
        private string tableName = "";
        private string directoryName = ""; 
        private string lastError = "";
        private Data data ;

        //
        // Constructor
        // ===========
        public dbLib(string tableName, Data data) {
            lastError = "";
            // Set the name of the database table in the Database folder. It will
            // be a subdirectory of the Database folder located below the bin/Debug
            // folder for this project.     
            this.tableName = tableName;
            this.data = data;

            // Automatically set a string to hold the path to the Database folder in the
            // correct bin/Debug folder for this project.
            directoryName = Directory.GetCurrentDirectory();
        
            // Create the database and table if it does not exist.
            if (!Directory.Exists(directoryName + "\\Database\\" + tableName + "\\")) {
                try {                    
                    Directory.CreateDirectory(directoryName + "\\Database\\" + tableName + "\\");
                } catch {
                    lastError = "Cannot create database in directory " +
                                directoryName;  
                }
            }            
        }

        //
        // LastError 
        // =========
        // Returns the last error message generated by this class.
        //
        public string LastError {
            get { return lastError; }                
        }

        //
        // Read
        // ====
        // Reads the specified record from the database table and unpacks the data in the
        // record if it is found. If the record is not found, all the database entries are
        // automaticall set blank so a new record can be created by the program if necessary.
        //
        public Data Read(string ID) {  
            lastError = "";                      
            string json;

            if (directoryName.Trim() == "") {
                lastError = "Database directory name is blank.";
            } else if (tableName.Trim() == "") {
                lastError = "Table name is blank.";
            } else if (ID.Trim() == "") {
                lastError = "The record ID is blank"; 
            } else {
                // Open the JSON file, read to the end, and convert the JSON data to a single object
                // with named fields. This is called deserialising.
                try {
                    StreamReader reader = new StreamReader(directoryName + "\\Database\\" + tableName + "\\" + ID); 
                    json = reader.ReadToEnd();
                    reader.Close();

                    // The options variable sets up the parameters to make the DeSerialiszer 
                    // case insensitive.
                    var JsonOptions = new JsonSerializerOptions();
                    JsonOptions.PropertyNameCaseInsensitive = true;                    
                    this.data = JsonSerializer.Deserialize<Data>(json, JsonOptions);                    

                } catch (Exception e) {
                    // the record was not found.
                    lastError = e.Message;                    
                } 
            }
            return data;
        }

        //
        // Update
        // ======
        // This function updates an existing customer or creates a new one.
        // Before calling this function, the calling form needs to update
        // each of the data fields.
        // 
        public Boolean Update(string ID) {
            Boolean updated = false;
            string json = "";
            lastError = "";

            if (directoryName.Trim() == "") {
                lastError = "Database directory name is blank.";
            } else if (tableName.Trim() == "") {
                lastError = "Table name is blank.";
            } else if (ID.Trim() == "") {
                lastError = "The record ID is blank"; 
            } else {
                // The options variable sets up the parameters to make the Serialiszer 
                // format the JSON values indented on individual lines. They are easier
                // to read that way when the file is opened later in a text editor.
                var options = new JsonSerializerOptions() {
                    WriteIndented = true
                };

                // Create the JSON format record for the table
                json = JsonSerializer.Serialize(data, options);

                // Write the record to the table
                try {
                    StreamWriter writer = new StreamWriter(directoryName + "\\Database\\" + tableName + "\\" + ID);
                    writer.Write(json);                    
                    writer.Close();
                    updated = true;
                } catch (Exception e) {
                    // the record could not be written, but the catch stops the 
                    // system crashing.
                    lastError = "Could not write JSON text to the file. Error returned: \n\n" + e.Message;
                }
            }
            return updated;
        }

        //
        // Query
        // =====
        // Returns a string array containing the IDs of all
        // the records in the table.
        //
        public string[] Query() {            
            string[] fileList = Directory.GetFiles(directoryName + "\\Database\\" + tableName);
            
            for (int ptr = 0; ptr < fileList.Length;  ptr++) {                
                // Extract just the file name from the list of files.               
               fileList[ptr] = Path.GetFileName(fileList[ptr]);                
            }                        
            return fileList;
        }
    }
}
